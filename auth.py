import json
import streamlit as st
import hashlib
import jwt
import time
from typing import Dict, Optional, Tuple

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
USERS_FILE = "users.json"

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ .env)
JWT_SECRET = "eduai_hub_secret_key_2024"
JWT_ALGORITHM = "HS256"

def load_users() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except Exception:
        return {}

def save_users(users: Dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        return True
    except Exception:
        return False

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å"""
    return hashlib.sha256(password.encode()).hexdigest()

def register_user(username: str, password: str, role: str) -> Tuple[bool, str]:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    users = load_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if username in users:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
    if role not in ["student", "teacher"]:
        return False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[username] = {
        "password_hash": hash_password(password),
        "role": role,
        "created_at": int(time.time())
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    if save_users(users):
        return True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

def authenticate_user(username: str, password: str) -> Tuple[bool, str, Optional[Dict]]:
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–Ω–Ω—ã–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    users = load_users()
    
    if username not in users:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None
    
    user_data = users[username]
    password_hash = hash_password(password)
    
    if user_data["password_hash"] != password_hash:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", None
    
    return True, "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", user_data

def create_jwt_token(username: str, user_data: Dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {
        "username": username,
        "role": user_data["role"],
        "created_at": user_data.get("created_at", int(time.time())),
        "exp": int(time.time()) + (24 * 60 * 60)  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞
    }
    
    return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)

def validate_jwt_token(token: str) -> Optional[Dict]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        return {
            "username": payload["username"],
            "role": payload["role"],
            "created_at": payload.get("created_at", "unknown")
        }
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None
    except Exception:
        return None

def is_authenticated() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º session_state
    if st.session_state.get("authenticated", False):
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    try:
        query_params = st.query_params
        token = query_params.get("token")
        
        if token:
            user_data = validate_jwt_token(token)
            if user_data:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                st.session_state["authenticated"] = True
                st.session_state["user_data"] = user_data
                st.session_state["jwt_token"] = token
                return True
            else:
                # –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—á–∏—â–∞–µ–º URL
                st.query_params.clear()
    except Exception:
        pass
    
    return False

def get_current_user() -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_authenticated():
        return st.session_state.get("user_data")
    return None

def get_current_username() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = get_current_user()
    return user_data.get("username", "Unknown") if user_data else "Unknown"

def get_current_role() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = get_current_user()
    return user_data.get("role", "student") if user_data else "student"

def login_user(username: str, user_data: Dict):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ"""
    st.session_state["authenticated"] = True
    st.session_state["user_data"] = {
        "username": username,
        "role": user_data["role"],
        "created_at": user_data.get("created_at", "unknown")
    }
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    token = create_jwt_token(username, st.session_state["user_data"])
    st.session_state["jwt_token"] = token
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ URL –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    try:
        st.query_params["token"] = token
    except Exception:
        pass

def logout_user():
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    # –û—á–∏—â–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    try:
        st.query_params.clear()
    except Exception:
        pass
    
    st.session_state["authenticated"] = False
    st.session_state["user_data"] = None
    st.session_state["jwt_token"] = None

def render_login_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    st.set_page_config(page_title="EduAI Hub - –í—Ö–æ–¥", page_icon="üéì", layout="wide")
    
    
    st.markdown("""
    <style>
    .block-container { padding-top: 2rem !important; padding-bottom: 2rem !important; }
    
    .login-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        border: 1px solid #eaeaea;
        border-radius: 16px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        background: #fff;
    }
    
    .card {
        border: 1px solid #eaeaea;
        border-radius: 16px;
        padding: 16px 16px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        background: #fff;
        margin-bottom: 12px;
    }
    
    div.stButton > button {
        border-radius: 10px;
        padding: 0.55rem 1rem;
        border: 1px solid #e5e7eb;
        width: 100%;
    }
    
    .muted { color: #6b7280; font-size: 12px; }
    </style>
    """, unsafe_allow_html=True)
    
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown('<div class="login-container">', unsafe_allow_html=True)
        
        st.title("üéì EduAI Hub")
        st.markdown("### –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        st.divider()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –≤—Ö–æ–¥–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        tab_login, tab_register = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        
        with tab_login:
            st.markdown("### –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            
            with st.form("login_form"):
                username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
                
                submitted = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)
                
                if submitted:
                    if not username or not password:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    else:
                        success, message, user_data = authenticate_user(username, password)
                        if success:
                            login_user(username, user_data)
                            st.success(message)
                            st.rerun()
                        else:
                            st.error(message)
        
        with tab_register:
            st.markdown("### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            
            with st.form("register_form"):
                new_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="reg_username")
                new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å", key="reg_password")
                confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å", key="reg_confirm")
                role = st.selectbox("–†–æ–ª—å", ["student", "teacher"], format_func=lambda x: "–°—Ç—É–¥–µ–Ω—Ç" if x == "student" else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
                
                submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", use_container_width=True)
                
                if submitted:
                    if not new_username or not new_password or not confirm_password:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    elif new_password != confirm_password:
                        st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    elif len(new_password) < 4:
                        st.error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")
                    else:
                        success, message = register_user(new_username, new_password, role)
                        if success:
                            st.success(message)
                            st.info("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                        else:
                            st.error(message)
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö
        st.markdown("---")
        with st.expander("‚ÑπÔ∏è –û —Ä–æ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
            st.markdown("""
            **–°—Ç—É–¥–µ–Ω—Ç** ‚Äî –º–æ–∂–µ—Ç:
            - –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ü–µ–Ω–∫–∏
            - –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–µ
            - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞
            - –í–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
            
            **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å** ‚Äî –º–æ–∂–µ—Ç:
            - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
            - –ó–∞–≥—Ä—É–∂–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞
            - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            - –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è–º–∏
            """)

def require_auth():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
    if not is_authenticated():
        render_login_page()
        st.stop()