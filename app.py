import json, re, os, time
import streamlit as st
import streamlit.components.v1
import io, pandas as pd
from dotenv import load_dotenv
from statistics import mean
from datetime import datetime

load_dotenv()

from openai import OpenAI
from auth import require_auth, get_current_username, get_current_role, logout_user
from test_manager import (
    generate_test_id, validate_test_data, convert_to_rubric_format
)

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
client = None
if DEEPSEEK_API_KEY:
    client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")  # OpenAI-compatible
DEEPSEEK_MODEL = "deepseek-chat"  # or "deepseek-reasoner"


# --- persistence + badges
POINTS_PATH = "points.json"
SUBM_PATH   = "submissions.json"
REVIEWS_PATH = "reviews.json"

# --- Materials storage
MATERIALS_DIR = "materials"
MATERIALS_INDEX = "materials_index.json"  # subject -> [ {name, path, size, mime, uploader, note, ts} ]


def current_subject() -> str:
    return st.session_state.get("subject", "General")

def assignment_selector(widget_key: str):
    subj = current_subject()
    sub_rubrics = [r for r in RUBRICS if r.get("subject", "General") == subj]
    if not sub_rubrics:
        st.info("–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")
        return None
    id_to_r = {r["assignment_id"]: r for r in sub_rubrics}
    ids = list(id_to_r.keys())

    cur = st.session_state.get("assign_id", ids[0])
    if cur not in ids:
        cur = ids[0]

    def format_assignment(rid: str) -> str:
        r = id_to_r[rid]
        title = r.get("title", rid)
        due = r.get("due_date")
        if due:
            try:
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì
                from datetime import datetime
                d = datetime.fromisoformat(due)
                return f"{title} (–¥–æ {d.strftime('%d.%m.%Y')})"
            except Exception:
                return f"{title} (–¥–æ {due})"
        return title

    rid = st.selectbox(
        "–ó–∞–¥–∞–Ω–∏–µ:",
        options=ids,
        index=ids.index(cur),
        format_func=format_assignment,
        key=widget_key,
    )
    st.session_state["assign_id"] = rid
    return id_to_r[rid]

def submission_preview(s: dict, max_len: int = 60) -> str:
    """–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–µ.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ ('answer') –∏ –Ω–æ–≤—ã–µ ('answers'=[...]) —Ñ–æ—Ä–º–∞—Ç—ã."""
    if "answer" in s:  
        txt = s.get("answer") or ""
    elif "answers" in s and s["answers"]:
        # –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç, –ª–∏–±–æ —Å–∫–ª–µ–∏–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        parts = [a.get("answer", "") for a in s["answers"] if a.get("answer")]
        txt = " | ".join(parts[:2]) if parts else ""
    else:
        txt = ""
    txt = txt.strip().replace("\n", " ")
    return (txt[:max_len] + "‚Ä¶") if len(txt) > max_len else txt


def load_json(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path, obj):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(obj, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def badge_for(points: int) -> str:
    if points >= 50: return "üèÖ Power Learner"
    if points >= 30: return "ü•á Consistent"
    if points >= 15: return "ü•à Getting There"
    if points >= 5:  return "ü•â Starter"
    return "üå± Rookie"

def migrate_stores_to_subject_scope():
    # –±—ã–ª dict user->points, —Ç–µ–ø–µ—Ä—å dict subject->(dict user->points)
    if isinstance(st.session_state.points, dict) and st.session_state.points and \
       all(isinstance(v, int) for v in st.session_state.points.values()):
        st.session_state.points = {"General": st.session_state.points}
        save_json(POINTS_PATH, st.session_state.points)

    # dict subject->list
    if isinstance(st.session_state.submissions, list):
        st.session_state.submissions = {"General": st.session_state.submissions}
        save_json(SUBM_PATH, st.session_state.submissions)

    # dict subject->list
    if isinstance(st.session_state.reviews, list):
        st.session_state.reviews = {"General": st.session_state.reviews}
        save_json(REVIEWS_PATH, st.session_state.reviews)

def load_materials_index():
    return load_json(MATERIALS_INDEX, {})

def save_materials_index(idx):
    save_json(MATERIALS_INDEX, idx)

def ensure_dir(path: str):
    os.makedirs(path, exist_ok=True)

def get_materials_store():
    idx = load_materials_index()
    subj = current_subject()
    if subj not in idx:
        idx[subj] = []
        save_materials_index(idx)
    return idx, idx[subj]

def safe_filename(name: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    return re.sub(r"[^A-Za-z0-9._\-]+", "_", name)

def display_filename(name: str, original_name: str = None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if original_name and original_name.strip():
        return original_name
    
    # –ï—Å–ª–∏ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    clean_name = name.replace("_", "").replace(".", "").replace("-", "")
    if len(clean_name) <= 2:  # –¢–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        if name.lower().endswith('.pdf'):
            return "–î–æ–∫—É–º–µ–Ω—Ç PDF"
        elif name.lower().endswith('.docx'):
            return "–î–æ–∫—É–º–µ–Ω—Ç Word"
        elif name.lower().endswith('.pptx'):
            return "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è PowerPoint"
        elif name.lower().endswith('.txt'):
            return "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"
        else:
            return "–§–∞–π–ª"
    
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π, –Ω–æ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã
    if name.count('_') > len(name) * 0.7:  # –ë–æ–ª—å—à–µ 70% –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        parts = name.split('_')
        readable_parts = []
        for part in parts:
            if part and not part.startswith('.'):
                readable_parts.append(part)
        
        if readable_parts:
            return ' '.join(readable_parts)
        else:
            return "–§–∞–π–ª"
    
    return name

def extract_text_from_file(file_path: str, mime_type: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    try:
        if mime_type == "application/pdf" or file_path.lower().endswith('.pdf'):
            try:
                import PyPDF2
                with open(file_path, 'rb') as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    text = ""
                    for page in pdf_reader.pages:
                        page_text = page.extract_text()
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                        if page_text:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            try:
                                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                                if '√ê' in page_text or '√ë' in page_text:
                                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                                    page_text = page_text.encode('latin1').decode('utf-8', errors='ignore')
                            except:
                                pass
                            text += page_text + "\n"
                    return text.strip()
            except Exception as pdf_error:
                # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pdfplumber –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                try:
                    import pdfplumber
                    with pdfplumber.open(file_path) as pdf:
                        text = ""
                        for page in pdf.pages:
                            page_text = page.extract_text()
                            if page_text:
                                text += page_text + "\n"
                        return text.strip()
                except ImportError:
                    return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {str(pdf_error)}. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pdfplumber –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏."
        
        elif mime_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" or file_path.lower().endswith('.docx'):
            try:
                from docx import Document
                doc = Document(file_path)
                text = ""
                for paragraph in doc.paragraphs:
                    if paragraph.text:
                        text += paragraph.text + "\n"
                return text.strip()
            except Exception as docx_error:
                return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {str(docx_error)}"
        
        elif mime_type == "application/vnd.openxmlformats-officedocument.presentationml.presentation" or file_path.lower().endswith('.pptx'):
            try:
                from pptx import Presentation
                prs = Presentation(file_path)
                text = ""
                for slide in prs.slides:
                    for shape in slide.shapes:
                        if hasattr(shape, "text") and shape.text:
                            text += shape.text + "\n"
                return text.strip()
            except Exception as pptx_error:
                return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PPTX: {str(pptx_error)}"
        
        elif mime_type == "text/plain" or file_path.lower().endswith('.txt'):
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è TXT —Ñ–∞–π–ª–æ–≤
            encodings = ['utf-8', 'cp1251', 'latin1', 'utf-16']
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as file:
                        return file.read().strip()
                except UnicodeDecodeError:
                    continue
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"
        
        else:
            return f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {mime_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"
    
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}"

def generate_annotation(text: str, filename: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek API"""
    if client is None:
        return "AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á API"
    
    if not text or len(text.strip()) < 50:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"
    
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è API (–ø—Ä–∏–º–µ—Ä–Ω–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 4000
        if len(text) > max_length:
            text = text[:max_length] + "..."
        
        system_msg = (
            "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫—Ä–∞—Ç–∫–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–∞—è: "
            "1) –û–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "
            "2) –í—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –∏–¥–µ–∏ "
            "3) –£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å "
            "4) –ü–∏—à–µ—Ç—Å—è –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
        )
        
        user_msg = f"–§–∞–π–ª: {filename}\n\n–¢–µ–∫—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞:\n{text}"
        
        resp = client.chat.completions.create(
            model=DEEPSEEK_MODEL,
            temperature=0.3,
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
        )
        
        annotation = resp.choices[0].message.content.strip()
        return annotation
    
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {str(e)}"

def get_points_store() -> dict:
    subj = current_subject()
    if subj not in st.session_state.points:
        st.session_state.points[subj] = {}
    return st.session_state.points[subj]

def save_points_store():
    save_json(POINTS_PATH, st.session_state.points)

def get_submissions_store() -> list:
    subj = current_subject()
    if subj not in st.session_state.submissions:
        st.session_state.submissions[subj] = []
    return st.session_state.submissions[subj]

def save_submissions_store():
    save_json(SUBM_PATH, st.session_state.submissions)

def get_reviews_store() -> list:
    subj = current_subject()
    if subj not in st.session_state.reviews:
        st.session_state.reviews[subj] = []
    return st.session_state.reviews[subj]

def save_reviews_store():
    save_json(REVIEWS_PATH, st.session_state.reviews)

def process_chat_question(question: str, subject: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    """
    if client is None:
        return "‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á API (DEEPSEEK_API_KEY)"
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context = build_chat_context(subject)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        question_lower = question.lower()
        
        if any(word in question_lower for word in ["–¥–µ–¥–ª–∞–π–Ω", "—Å—Ä–æ–∫", "–∫–æ–≥–¥–∞", "–¥–æ –∫–∞–∫–æ–≥–æ"]):
            return handle_deadline_question(question, subject, context)
        elif any(word in question_lower for word in ["–º–∞—Ç–µ—Ä–∏–∞–ª", "–ª–µ–∫—Ü–∏—è", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å", "–∏–∑—É—á–∏—Ç—å", "—á—Ç–æ —á–∏—Ç–∞—Ç—å", "–∑–∞–¥–∞–Ω–∏–µ"]):
            return handle_material_question(question, subject, context)
        elif any(word in question_lower for word in ["–ø—Ä–æ—Å—Ä–æ—á–µ–Ω", "–æ–ø–æ–∑–¥–∞–ª", "–Ω–µ —É—Å–ø–µ–ª"]):
            return handle_overdue_question(question, subject, context)
        else:
            return handle_general_question(question, subject, context)
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"

def build_chat_context(subject: str) -> dict:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è AI"""
    context = {
        "subject": subject,
        "assignments": [],
        "materials": [],
        "videos": [],
        "current_date": datetime.now().isoformat()
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∑–∞–¥–∞–Ω–∏—è—Ö
    subj_rubrics = [r for r in RUBRICS if r.get("subject", "General") == subject]
    for rubric in subj_rubrics:
        assignment_info = {
            "title": rubric.get("title", ""),
            "assignment_id": rubric.get("assignment_id", ""),
            "due_date": rubric.get("due_date", ""),
            "questions": []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–∞—Ö
        for q in rubric.get("questions", []):
            keywords = []
            for kw in q.get("keywords", []):
                if isinstance(kw, dict):
                    keywords.append(kw.get("word", ""))
                else:
                    keywords.append(str(kw))
            
            question_info = {
                "title": q.get("title", ""),
                "keywords": keywords
            }
            assignment_info["questions"].append(question_info)
        
        context["assignments"].append(assignment_info)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
    idx, materials = get_materials_store()
    for material in materials:
        if isinstance(material, dict):
            material_info = {
                "name": material.get("name", ""),
                "note": material.get("note", ""),
                "annotation": material.get("annotation", "")
            }
            context["materials"].append(material_info)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    try:
        with open("videos.json", "r", encoding="utf-8") as f:
            videos_data = json.load(f)
        subject_videos = videos_data.get(subject, [])
        for video in subject_videos:
            if isinstance(video, dict):
                video_info = {
                    "title": video.get("title", ""),
                    "note": video.get("note", "")
                }
                context["videos"].append(video_info)
    except:
        pass
    
    return context

def handle_deadline_question(question: str, subject: str, context: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö"""
    response_parts = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω—ã
    today = datetime.now()
    overdue_assignments = []
    upcoming_assignments = []
    
    for assignment in context["assignments"]:
        due_date_str = assignment.get("due_date", "")
        if due_date_str:
            try:
                due_date = datetime.fromisoformat(due_date_str)
                days_left = (due_date - today).days
                
                if days_left < 0:
                    overdue_assignments.append({
                        "title": assignment["title"],
                        "days_overdue": abs(days_left)
                    })
                elif days_left <= 7:  # –ë–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                    upcoming_assignments.append({
                        "title": assignment["title"],
                        "days_left": days_left,
                        "due_date": due_date_str
                    })
            except:
                pass
    
    if overdue_assignments:
        response_parts.append("üî¥ **–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:**")
        for assignment in overdue_assignments:
            response_parts.append(f"‚Ä¢ **{assignment['title']}** - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {assignment['days_overdue']} –¥–Ω.")
    
    if upcoming_assignments:
        response_parts.append("\nüü° **–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:**")
        for assignment in upcoming_assignments:
            if assignment['days_left'] == 0:
                response_parts.append(f"‚Ä¢ **{assignment['title']}** - —Å–µ–≥–æ–¥–Ω—è!")
            else:
                response_parts.append(f"‚Ä¢ **{assignment['title']}** - —á–µ—Ä–µ–∑ {assignment['days_left']} –¥–Ω.")
    
    if not overdue_assignments and not upcoming_assignments:
        response_parts.append("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏.")
    
    return "\n".join(response_parts)

def handle_material_question(question: str, subject: str, context: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö"""
    if client is None:
        return "‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ª–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–µ—Å—Ç–µ/–∑–∞–¥–∞–Ω–∏–∏
        question_lower = question.lower()
        specific_assignment = find_specific_assignment(question, context["assignments"])
        
        if specific_assignment:
            return handle_specific_assignment_question(question, specific_assignment, context)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ª–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
            import re
            numbers = re.findall(r'\d+', question)
            if numbers and any(word in question_lower for word in ["—Ç–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–¥–∑", "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è"]):
                return handle_not_found_assignment(question, numbers, context)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        relevant_keywords = extract_keywords_from_question(question)
        matching_assignments = find_matching_assignments(question, context["assignments"])
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        material_analysis = analyze_materials_for_question(question, context["materials"], relevant_keywords)
        video_analysis = analyze_videos_for_question(question, context["videos"], relevant_keywords)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        response_parts = []
        
        if material_analysis["suitable_materials"]:
            response_parts.append("üìö **–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:**")
            for material in material_analysis["suitable_materials"]:
                response_parts.append(f"‚Ä¢ **{material['name']}** - {material['reason']}")
        else:
            response_parts.append("üìö **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:** –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
        if video_analysis["suitable_videos"]:
            response_parts.append("\nüé• **–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥–µ–æ:**")
            for video in video_analysis["suitable_videos"]:
                response_parts.append(f"‚Ä¢ **{video['title']}** - {video['reason']}")
        else:
            response_parts.append("\nüé• **–í–∏–¥–µ–æ:** –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
        if matching_assignments:
            response_parts.append("\nüìù **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:**")
            for assignment in matching_assignments:
                response_parts.append(f"‚Ä¢ **{assignment['title']}**")
                for q in assignment.get("questions", []):
                    if any(keyword.lower() in question.lower() for keyword in q.get("keywords", [])):
                        response_parts.append(f"  - {q['title']}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–∞–µ–º –æ–±—â–∏–π —Å–æ–≤–µ—Ç
        if not material_analysis["suitable_materials"] and not video_analysis["suitable_videos"]:
            response_parts.append("\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            response_parts.append("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏")
            response_parts.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —Ç–µ–º–µ")
            response_parts.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö")
        
        return "\n".join(response_parts)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {str(e)}"

def find_specific_assignment(question: str, assignments: list) -> dict:
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    question_lower = question.lower()
    
    # –ò—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É (—Ç–µ—Å—Ç 32, –∑–∞–¥–∞–Ω–∏–µ 2, –¥–∑1 –∏ —Ç.–¥.)
    import re
    numbers = re.findall(r'\d+', question)
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
    for assignment in assignments:
        assignment_title = assignment.get("title", "").lower().strip()
        assignment_id = assignment.get("assignment_id", "").lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        for number in numbers:
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–≤–µ–Ω –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è
            if number == assignment_title:
                return assignment
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, "11" –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å "1134"
            if number in assignment_title:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞
                import re
                # –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
                title_numbers = re.findall(r'\d+', assignment_title)
                if number in title_numbers:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∞ –Ω–µ —á–∞—Å—Ç—å
                    if number == assignment_title or f" {number} " in f" {assignment_title} " or assignment_title.startswith(number + " ") or assignment_title.endswith(" " + number):
                        return assignment
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    for assignment in assignments:
        assignment_title = assignment.get("title", "").lower()
        if any(word in assignment_title for word in ["—Ç–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–¥–∑", "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è"]):
            if any(word in question_lower for word in ["—Ç–µ—Å—Ç", "–∑–∞–¥–∞–Ω–∏–µ", "–¥–∑", "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è"]):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä
                for number in numbers:
                    if number in assignment_title:
                        return assignment
    
    return None

def handle_not_found_assignment(question: str, numbers: list, context: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    response_parts = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    response_parts.append(f"‚ùå **–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**")
    response_parts.append(f"–ó–∞–¥–∞–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {', '.join(numbers)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫—É—Ä—Å–µ.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    available_assignments = context["assignments"]
    if available_assignments:
        response_parts.append("\nüìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:**")
        for assignment in available_assignments:
            title = assignment.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            response_parts.append(f"‚Ä¢ **{title}**")
    else:
        response_parts.append("\nüìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:** –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    response_parts.append("\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
    response_parts.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è")
    response_parts.append("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è")
    response_parts.append("‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã—à–µ")
    
    return "\n".join(response_parts)

def handle_specific_assignment_question(question: str, assignment: dict, context: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏"""
    response_parts = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
    response_parts.append(f"üìù **{assignment['title']}**")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
    test_type = assignment.get("test_type", "")
    questions = assignment.get("questions", [])
    
    if not questions:
        response_parts.append("\n‚ùå **–í –∑–∞–¥–∞–Ω–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.**")
        response_parts.append("–≠—Ç–æ –Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")
        return "\n".join(response_parts)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    response_parts.append(f"\n**–ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∞:**")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–æ–º
    is_real_test = True
    issues = []
    
    for i, q in enumerate(questions, 1):
        question_title = q.get("title", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        if not question_title or len(question_title.strip()) < 5:
            is_real_test = False
            issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ('{question_title}')")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º –∏–ª–∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        if question_title.strip().isdigit() or len(question_title.strip()) < 10:
            is_real_test = False
            issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º ('{question_title}')")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º
        if test_type == "multiple_choice" or q.get("options"):
            options = q.get("options", [])
            if not options or len(options) < 2:
                is_real_test = False
                issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
            elif len(set(options)) < len(options):
                is_real_test = False
                issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –µ—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ ({', '.join(options)})")
            elif all(opt.strip().isdigit() and len(opt.strip()) == 1 for opt in options):
                is_real_test = False
                issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if test_type == "keyword_based" or q.get("keywords"):
            keywords = q.get("keywords", [])
            if not keywords:
                is_real_test = False
                issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏")
    
    # –î–∞–µ–º —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ç–µ—Å—Ç–∞
    if not is_real_test:
        response_parts.append("‚ùå **–≠—Ç–æ –Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç.**")
        response_parts.append("–ü—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            response_parts.append(f"‚Ä¢ {issue}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if any("—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ" in issue.lower() for issue in issues):
            response_parts.append("\n‚ö†Ô∏è **–≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.**")
            response_parts.append("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –Ω–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        
        response_parts.append("\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞.")
    else:
        response_parts.append("‚úÖ **–≠—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç.**")
        response_parts.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        response_parts.append(f"–¢–∏–ø —Ç–µ—Å—Ç–∞: {'–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤' if test_type == 'multiple_choice' else '–° –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏'}")
    
    # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ - —ç—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è
    response_parts.append(f"\nüìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ:**")
    response_parts.append(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
    response_parts.append(f"‚Ä¢ –¢–∏–ø: {'–¢–µ—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤' if test_type == 'multiple_choice' else '–¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã'}")
    response_parts.append(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {sum(q.get('max_points', 0) for q in questions)}")
    
    response_parts.append("\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –Ø –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã - —ç—Ç–æ –Ω–∞—Ä—É—à–∏–ª–æ –±—ã –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω
    due_date = assignment.get("due_date")
    if due_date:
        try:
            from datetime import datetime
            due = datetime.fromisoformat(due_date)
            today = datetime.now()
            days_left = (due - today).days
            
            if days_left < 0:
                response_parts.append(f"\nüî¥ **–î–µ–¥–ª–∞–π–Ω:** –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_left)} –¥–Ω.")
                response_parts.append("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–∞–∂–µ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, –µ–≥–æ —Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
            elif days_left == 0:
                response_parts.append(f"\nüü° **–î–µ–¥–ª–∞–π–Ω:** –°–µ–≥–æ–¥–Ω—è!")
            else:
                response_parts.append(f"\nüü¢ **–î–µ–¥–ª–∞–π–Ω:** –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.")
        except:
            response_parts.append(f"\nüìÖ **–î–µ–¥–ª–∞–π–Ω:** {due_date}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if is_real_test:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        ai_recommendations = get_ai_material_recommendations(question, assignment, context)
        response_parts.append(ai_recommendations)
    else:
        response_parts.append("\nüìö **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:** –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –¥–ª—è –Ω–µ–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.")
        response_parts.append("üé• **–í–∏–¥–µ–æ:** –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –¥–ª—è –Ω–µ–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.")
    
    return "\n".join(response_parts)

def generate_ai_test(title: str, subject: str, description: str, question_count: int, selected_materials: list, material_options: dict) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    if client is None:
        return None
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
        materials_text = ""
        for material_name in selected_materials:
            material_info = material_options[material_name]
            materials_text += f"\n‚Ä¢ {material_info['name']}: {material_info.get('note', '')} - {material_info.get('annotation', '')}"
        
        system_msg = (
            "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤. "
            "–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            "–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –æ–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. "
            "–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."
        )
        
        user_msg = f"""
–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:

–ù–∞–∑–≤–∞–Ω–∏–µ: {title}
–ü—Ä–µ–¥–º–µ—Ç: {subject}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {question_count}

–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:
{materials_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –°–æ–∑–¥–∞–π {question_count} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
2. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (A, B, C, D)
3. –û–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
4. –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
5. –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∞ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
6. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ JSON):
{{
  "questions": [
    {{
      "question_id": "q1",
      "title": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
      "options": ["–í–∞—Ä–∏–∞–Ω—Ç A", "–í–∞—Ä–∏–∞–Ω—Ç B", "–í–∞—Ä–∏–∞–Ω—Ç C", "–í–∞—Ä–∏–∞–Ω—Ç D"],
      "correct_answer": "–í–∞—Ä–∏–∞–Ω—Ç A",
      "max_points": 10
    }}
  ]
}}
"""
        
        resp = client.chat.completions.create(
            model=DEEPSEEK_MODEL,
            temperature=0.7,
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
        )
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        import json
        content = resp.choices[0].message.content.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        import re
        json_match = re.search(r'\{.*\}', content, re.DOTALL)
        if json_match:
            json_str = json_match.group(0)
            test_data = json.loads(json_str)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            test_data["title"] = title
            test_data["subject"] = subject
            test_data["description"] = description
            test_data["test_type"] = "multiple_choice"
            test_data["ai_generated"] = True
            
            return test_data
        else:
            return None
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}")
        return None

def save_generated_test(test_data: dict, time_limit: int, due_date) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ rubric.json"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ç–µ—Å—Ç–∞
        test_id = generate_test_id(test_data["title"], test_data["subject"])
        test_data["assignment_id"] = test_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ –¥–µ–¥–ª–∞–π–Ω
        if time_limit > 0:
            test_data["time_limit_minutes"] = time_limit
        
        if due_date:
            test_data["due_date"] = due_date.isoformat()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Ä—É–±—Ä–∏–∫–∏
        rubric_data = convert_to_rubric_format(test_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä—É–±—Ä–∏–∫–∏
        with open("rubric.json", "r", encoding="utf-8") as f:
            rubrics = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä—É–±—Ä–∏–∫—É
        rubrics.append(rubric_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open("rubric.json", "w", encoding="utf-8") as f:
            json.dump(rubrics, f, ensure_ascii=False, indent=2)
        
        return True
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {str(e)}")
        return False

def get_ai_material_recommendations(question: str, assignment: dict, context: dict) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å"""
    if client is None:
        return "\nüìö **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:** AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –¥–ª—è AI
        assignment_title = assignment.get("title", "")
        test_type = assignment.get("test_type", "")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
        materials_info = []
        for material in context["materials"]:
            materials_info.append({
                "name": material.get("name", ""),
                "note": material.get("note", ""),
                "annotation": material.get("annotation", "")
            })
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        videos_info = []
        for video in context["videos"]:
            videos_info.append({
                "title": video.get("title", ""),
                "note": video.get("note", "")
            })
        
        system_msg = (
            "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. "
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –¢–û–õ–¨–ö–û –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. "
            "–ë—É–¥—å —Å—Ç—Ä–æ–≥–∏–º –≤ –æ—Ç–±–æ—Ä–µ - –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å —Ç–µ–º–æ–π. "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —á–µ—Å—Ç–Ω—ã–º. "
            "–ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."
        )
        
        user_msg = f"""
–í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞: {question}

–ó–∞–¥–∞–Ω–∏–µ: {assignment_title}
–¢–∏–ø —Ç–µ—Å—Ç–∞: {test_type}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:
{chr(10).join([f"‚Ä¢ {m['name']}: {m.get('note', '')} - {m.get('annotation', '')}" for m in materials_info])}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ:
{chr(10).join([f"‚Ä¢ {v['title']}: {v.get('note', '')}" for v in videos_info])}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É—Ç —Å —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.
–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å —Ç–µ–º–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π).
"""
        
        resp = client.chat.completions.create(
            model=DEEPSEEK_MODEL,
            temperature=0.2,
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
        )
        
        return "\nü§ñ **AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:**\n" + resp.choices[0].message.content.strip()
        
    except Exception as e:
        return f"\nüìö **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:** –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

def analyze_materials_for_question(question: str, materials: list, keywords: list) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–æ–ø—Ä–æ—Å—É"""
    question_lower = question.lower()
    suitable_materials = []
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
    if "–∑–∞–¥–∞–Ω–∏–µ" in question_lower:
        # –ò—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        for material in materials:
            material_name = material.get("name", "").lower()
            material_note = material.get("note", "").lower()
            material_annotation = material.get("annotation", "").lower()
            
            # –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –ø–æ ML –∏–ª–∏ Python
            if any(term in material_name or term in material_note or term in material_annotation 
                   for term in ["python", "ml", "–º–∞—à–∏–Ω–Ω–æ–µ", "–æ–±—É—á–µ–Ω–∏–µ", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–º–æ–¥–µ–ª—å"]):
                suitable_materials.append({
                    "name": material["name"],
                    "reason": "—Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –∏ Python"
                })
    
    # –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for material in materials:
        material_name = material.get("name", "").lower()
        material_note = material.get("note", "").lower()
        material_annotation = material.get("annotation", "").lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if any(keyword in material_name for keyword in keywords):
            suitable_materials.append({
                "name": material["name"],
                "reason": f"–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join([k for k in keywords if k in material_name])}"
            })
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        if any(keyword in material_note for keyword in keywords):
            suitable_materials.append({
                "name": material["name"],
                "reason": f"–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join([k for k in keywords if k in material_note])}"
            })
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        if any(keyword in material_annotation for keyword in keywords):
            suitable_materials.append({
                "name": material["name"],
                "reason": f"–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join([k for k in keywords if k in material_annotation])}"
            })
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É
        if any(word in material_name or word in material_note or word in material_annotation 
               for word in question_lower.split() if len(word) > 3):
            suitable_materials.append({
                "name": material["name"],
                "reason": "—Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞"
            })
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_materials = []
    seen_names = set()
    for material in suitable_materials:
        if material["name"] not in seen_names:
            unique_materials.append(material)
            seen_names.add(material["name"])
    
    return {"suitable_materials": unique_materials}

def analyze_videos_for_question(question: str, videos: list, keywords: list) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–æ–ø—Ä–æ—Å—É"""
    question_lower = question.lower()
    suitable_videos = []
    
    for video in videos:
        video_title = video.get("title", "").lower()
        video_note = video.get("note", "").lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if any(keyword in video_title for keyword in keywords):
            suitable_videos.append({
                "title": video["title"],
                "reason": f"–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join([k for k in keywords if k in video_title])}"
            })
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        if any(keyword in video_note for keyword in keywords):
            suitable_videos.append({
                "title": video["title"],
                "reason": f"–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join([k for k in keywords if k in video_note])}"
            })
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É
        if any(word in video_title or word in video_note 
               for word in question_lower.split() if len(word) > 3):
            suitable_videos.append({
                "title": video["title"],
                "reason": "—Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞"
            })
    
    return {"suitable_videos": suitable_videos}

def extract_keywords_from_question(question: str) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    question_lower = question.lower()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö
    technical_terms = [
        "bias", "variance", "overfitting", "underfitting", "—Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è", "–≤–∞–ª–∏–¥–∞—Ü–∏—è", "dropout",
        "precision", "recall", "f1", "roc", "auc", "pr", "–¥–∏—Å–±–∞–ª–∞–Ω—Å", "–∫–ª–∞—Å—Å–æ–≤",
        "k-fold", "cross-validation", "—Ä–∞–∑–±–∏–µ–Ω–∏–µ", "—Å—Ä–µ–¥–Ω–µ–µ",
        "leakage", "—Å—Ç—Ä–∞—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "shuffle", "random_state",
        "scaling", "encoding", "interaction", "feature", "engineering",
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "ml", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–º–æ–¥–µ–ª—å", "–æ–±—É—á–µ–Ω–∏–µ",
        "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "–¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π", "–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Ä–µ–≥—Ä–µ—Å—Å–∏—è",
        "python", "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "sequences", "zen", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è",
        "–∑–∞–¥–∞–Ω–∏–µ", "–¥–æ–º–∞—à–Ω–µ–µ", "–¥–∑", "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è", "—Ç–µ—Å—Ç", "–ª–µ–∫—Ü–∏—è"
    ]
    
    found_keywords = []
    for term in technical_terms:
        if term in question_lower:
            found_keywords.append(term)
    
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
    question_words = [word for word in question_lower.split() if len(word) > 3]
    found_keywords.extend(question_words)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return list(set(found_keywords))

def find_matching_assignments(question: str, assignments: list) -> list:
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–æ–ø—Ä–æ—Å—É"""
    question_lower = question.lower()
    matching = []
    
    for assignment in assignments:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è
        if any(word in assignment["title"].lower() for word in question_lower.split()):
            matching.append(assignment)
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ –∑–∞–¥–∞–Ω–∏–∏
        for q in assignment.get("questions", []):
            if any(word in q["title"].lower() for word in question_lower.split()):
                matching.append(assignment)
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            for keyword in q.get("keywords", []):
                if isinstance(keyword, dict):
                    keyword_text = keyword.get("word", "").lower()
                else:
                    keyword_text = str(keyword).lower()
                
                if keyword_text in question_lower:
                    matching.append(assignment)
                    break
    
    return matching

def handle_overdue_question(question: str, subject: str, context: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö"""
    today = datetime.now()
    overdue_assignments = []
    
    for assignment in context["assignments"]:
        due_date_str = assignment.get("due_date", "")
        if due_date_str:
            try:
                due_date = datetime.fromisoformat(due_date_str)
                days_left = (due_date - today).days
                
                if days_left < 0:
                    overdue_assignments.append({
                        "title": assignment["title"],
                        "days_overdue": abs(days_left),
                        "questions": assignment["questions"]
                    })
            except:
                pass
    
    if not overdue_assignments:
        return "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"
    
    response_parts = ["üî¥ **–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:**"]
    
    for assignment in overdue_assignments:
        response_parts.append(f"\n**{assignment['title']}** (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {assignment['days_overdue']} –¥–Ω.)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        for question in assignment["questions"]:
            keywords = []
            for kw in question.get("keywords", []):
                if isinstance(kw, dict):
                    keywords.append(kw.get("word", ""))
                else:
                    keywords.append(str(kw))
            
            if keywords:
                response_parts.append(f"  ‚Ä¢ {question['title']} - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")
    
    response_parts.append("\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
    response_parts.append("‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–∞—á–∏")
    response_parts.append("‚Ä¢ –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤")
    response_parts.append("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —á–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∑–∞ –ø–æ–º–æ—â—å—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏")
    
    return "\n".join(response_parts)

def handle_general_question(question: str, subject: str, context: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ AI"""
    if client is None:
        return "‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context_text = f"""
–ü—Ä–µ–¥–º–µ—Ç: {subject}
–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {len(context['materials'])} —Ñ–∞–π–ª–æ–≤
–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ: {len(context['videos'])} –≤–∏–¥–µ–æ
–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(context['assignments'])}
"""
        
        system_msg = (
            "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —É—á–µ–±–Ω–æ–º—É –∫—É—Ä—Å—É. "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø–æ–º–æ–≥–∞–π —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –∫—É—Ä—Å—É. "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã. "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."
        )
        
        user_msg = f"""
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞:
{context_text}

–í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞: {question}

–ü–æ–º–æ–≥–∏ —Å—Ç—É–¥–µ–Ω—Ç—É —Å –µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–º.
"""
        
        resp = client.chat.completions.create(
            model=DEEPSEEK_MODEL,
            temperature=0.4,
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
        )
        
        return resp.choices[0].message.content.strip()
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
if "jwt_token" not in st.session_state:
    st.session_state["jwt_token"] = None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
require_auth()

st.set_page_config(page_title="EduAI Hub (Mini)", page_icon="üéì", layout="wide")
st.markdown("""
<style>
/* Layout spacing */
.block-container { padding-top: 2rem !important; padding-bottom: 2rem !important; }

/* Cards */
.card {
  border: 1px solid #eaeaea;
  border-radius: 16px;
  padding: 16px 16px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.04);
  background: #fff;
  margin-bottom: 12px;
}

/* Buttons */
div.stButton > button {
  border-radius: 10px;
  padding: 0.55rem 1rem;
  border: 1px solid #e5e7eb;
}

/* Badges (chips) */
.badge {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 999px;
  background: #eef2ff;
  color: #3730a3;
  font-size: 12px;
  border: 1px solid #e0e7ff;
}

/* Muted small text */
.muted { color: #6b7280; font-size: 12px; }

/* Tables (slightly denser) */
.dataframe tbody tr th, .dataframe tbody tr td { padding: 6px 10px; }
</style>
""", unsafe_allow_html=True)

st.title("EduAI Hub ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
st.divider()


# --- tiny "db" with persistence
if "points" not in st.session_state:
    st.session_state.points = load_json(POINTS_PATH, {})
if "submissions" not in st.session_state:
    st.session_state.submissions = load_json(SUBM_PATH, [])
if "reviews" not in st.session_state:
    st.session_state.reviews = load_json(REVIEWS_PATH, [])

migrate_stores_to_subject_scope()

# --- load rubric
with open("rubric.json", "r", encoding="utf-8") as f:
    RUBRICS = json.load(f)   # list of rubrics (>=1)
id_to_rubric = {r["assignment_id"]: r for r in RUBRICS}

def keyword_score_for(text: str, kw_list: list[dict], max_points: int):
    text_lc = (text or "").lower()
    score = 0
    details = []
    for kw in kw_list:
        found = bool(re.search(rf"\b{re.escape(kw['word'].lower())}\b", text_lc))
        if found:
            score += kw["points"]
            details.append(f"+{kw['points']}: –Ω–∞–π–¥–µ–Ω–æ '{kw['word']}'")
        else:
            details.append(f"+0: –Ω–µ—Ç '{kw['word']}'")
    score = min(score, max_points)
    return score, details


def llm_grade(answer_text: str, rubric: dict) -> dict | None:
    """
    Ask DeepSeek to grade 0‚Äì100 and give short feedback bullets.
    Returns {"score": int, "feedback": [str, ...]} or None on failure.
    """
    if client is None:
        st.warning("AI-–æ—Ü–µ–Ω–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á (DEEPSEEK_API_KEY).")
        return None
    try:
        system_msg = (
            "You are a strict but fair TA. "
            "Grade the student's short answer on a 0‚Äì100 scale based ONLY on the rubric. "
            "Return strict JSON: {\"score\": <int>, \"feedback\": [\"...\", \"...\"]}"
        )
        user_msg = (
            "Rubric title: " + rubric.get("title","") + "\n"
            "Max points: 100\n"
            "Keywords (hints): " + ", ".join([k['word'] for k in rubric.get('keywords', [])]) + "\n"
            "Student answer:\n" + answer_text
        )

        resp = client.chat.completions.create(
            model=DEEPSEEK_MODEL,
            temperature=0.2,
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
        )
        content = resp.choices[0].message.content.strip()

        # Extract JSON
        import json, re
        m = re.search(r"\{.*\}", content, re.S)
        json_str = m.group(0) if m else content
        data = json.loads(json_str)

        score = int(max(0, min(100, data.get("score", 0))))
        feedback = data.get("feedback", [])
        if not isinstance(feedback, list): feedback = [str(feedback)]
        return {"score": score, "feedback": feedback[:5]}

    except Exception as e:
        # Surface the real reason in the UI so you know what to fix
        error_msg = f"AI –æ—à–∏–±–∫–∞: {getattr(e, 'message', str(e))[:200]}"
        st.error(error_msg)
        return None

def award_points(user: str, pts: int):
    pts_store = get_points_store()
    pts_store[user] = pts_store.get(user, 0) + pts

def peer_avg_for_submission(subm_idx: int):
    reviews = get_reviews_store()
    scores = [r["avg_score"] for r in reviews if r["submission_idx"] == subm_idx]
    return (round(mean(scores), 2), len(scores)) if scores else (None, 0)

# --- sidebar "login"
st.sidebar.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
st.sidebar.header("–ü—Ä–æ—Ñ–∏–ª—å")

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_username = get_current_username()
current_role = get_current_role()
role_display = "–°—Ç—É–¥–µ–Ω—Ç" if current_role == "student" else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

st.sidebar.markdown(f"**üë§ {current_username}**")
if current_role == "student":
    st.sidebar.markdown(f"**üéì {role_display}**")
else:
    st.sidebar.markdown(f"**üë®‚Äçüè´ {role_display}**")


if st.sidebar.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
    logout_user()
    st.rerun()

st.sidebar.divider()


user = current_username

# --- subject picker
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ subjects.json
def load_subjects():
    try:
        with open("subjects.json", "r", encoding="utf-8") as f:
            subjects = json.load(f)
        return subjects
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–∑ rubric.json
        subjects = sorted({ r.get("subject", "General") for r in RUBRICS })
        save_subjects(subjects)
        return subjects

def save_subjects(subjects):
    try:
        with open("subjects.json", "w", encoding="utf-8") as f:
            json.dump(subjects, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")

SUBJECTS = load_subjects()

# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)
if current_role == "teacher":
    st.sidebar.markdown("### üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏")
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    new_subject = st.sidebar.text_input("–ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", key="new_subject_input")
    
    
    if st.sidebar.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", use_container_width=True):
        if new_subject and new_subject.strip():
            new_subject = new_subject.strip()
            if new_subject not in SUBJECTS:
                SUBJECTS.append(new_subject)
                SUBJECTS.sort()
                save_subjects(SUBJECTS)
                st.session_state.subject = new_subject
                st.sidebar.success(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{new_subject}' –¥–æ–±–∞–≤–ª–µ–Ω!")
                st.rerun()
            else:
                st.sidebar.warning("‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            st.sidebar.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
    
    if len(SUBJECTS) > 1:  
        st.sidebar.markdown("**–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç:**")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º General)
        subjects_to_delete = [s for s in SUBJECTS if s != "General"]
        
        if subjects_to_delete:
            subject_to_delete = st.sidebar.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                subjects_to_delete,
                key="subject_to_delete",
                help="–ü—Ä–µ–¥–º–µ—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–º –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π"
            )
            
            if st.sidebar.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", use_container_width=True):
                assignments_in_subject = [r for r in RUBRICS if r.get("subject") == subject_to_delete]
                if not assignments_in_subject:
                    SUBJECTS.remove(subject_to_delete)
                    save_subjects(SUBJECTS)
                    if st.session_state.get("subject") == subject_to_delete:
                        st.session_state.subject = "General"
                    st.sidebar.success(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_to_delete}' —É–¥–∞–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.sidebar.error(f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ ({len(assignments_in_subject)} –∑–∞–¥–∞–Ω–∏–π)")
    
    st.sidebar.markdown("---")

subject = st.sidebar.selectbox("–ü—Ä–µ–¥–º–µ—Ç", SUBJECTS, key="subject")

use_ai = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å AI-–æ—Ü–µ–Ω–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value=True)
st.session_state["use_ai"] = bool(use_ai)  

# Connection status
if client is None:
    st.sidebar.error("AI –æ—Ç–∫–ª—é—á–µ–Ω: –Ω–µ—Ç DEEPSEEK_API_KEY –≤ .env")
else:
    try:
        _ = client.models.list()  
        st.sidebar.success("AI –ø–æ–¥–∫–ª—é—á–µ–Ω (DeepSeek)")
    except Exception as e:
        st.sidebar.error(f"AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {getattr(e, 'message', str(e))[:120]}")
st.sidebar.info("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EduAI Hub!")


st.sidebar.divider()
st.sidebar.markdown("**–û –ø—Ä–æ–µ–∫—Ç–µ**\n\n–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π, –∫—Ä–æ—Å—Å-–æ—Ü–µ–Ω–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∫—É—Ä—Å–∞.")


if current_role == "teacher":
    tab_submit, tab_materials, tab_leaderboard, tab_peer, tab_chat, tab_test_creator = st.tabs(
        ["üìù –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞", "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", "ü§ù –ö—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞", "üí¨ –ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (–¥–µ–º–æ)", "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"]
    )
else:
    tab_submit, tab_materials, tab_leaderboard, tab_peer, tab_chat = st.tabs(
        ["üìù –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞", "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", "ü§ù –ö—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞", "üí¨ –ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (–¥–µ–º–æ)"]
    )

with tab_peer:

    st.subheader("–ö—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–∞–Ω–æ–Ω–∏–º–Ω–æ)")
    st.subheader("–í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è")
    RUBRIC = assignment_selector("assign_id_peer")
    if RUBRIC is None:
        st.info("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤'.")
    else:
        st.subheader("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω–∏—è")

        # Pick which assignment to review (reuse current selection)
        st.caption("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –≤—ã—à–µ).")
        # We already have assign_id and RUBRIC bound from the selector section.

        # Build candidate submissions
        subs = get_submissions_store()
        all_subms = [
            (idx, s) for idx, s in enumerate(subs)
            if s.get("assignment") == RUBRIC["assignment_id"] and s.get("user") != user
        ]

        if not all_subms:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —á—É–∂–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é.")
        else:
            # Show a simple picker
            option_indices = [idx for idx, _ in all_subms]
            labels = [f"#{idx} ‚Äî {s.get('user','?')}: {submission_preview(s)}" for idx, s in all_subms]
            sel = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", options=range(len(option_indices)),
                            format_func=lambda i: labels[i])
            pick_idx = option_indices[sel]
            pick = subs[pick_idx]


            st.write("–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞")
            if "answer" in pick:
                st.write(pick["answer"])
            elif "answers" in pick and pick["answers"]:
                for ans in pick["answers"]:
                    qid = ans.get("question_id", "")
                    atxt = (ans.get("answer") or "").strip()
                    st.markdown(f"**{qid}**")
                    st.write(atxt if atxt else "‚Äî")
                    st.markdown("<hr style='border:none;border-top:1px solid #eee;margin:8px 0;' />", unsafe_allow_html=True)
            else:
                st.write("–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")


            st.markdown("### –û—Ü–µ–Ω–∏—Ç–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (1‚Äì5)")
            c1, c2 = st.columns(2)
            with c1:
                sc_relevance  = st.slider("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–∏—é", 1, 5, 3)
                sc_structure  = st.slider("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ª–æ–≥–∏–∫–∞", 1, 5, 3)
            with c2:
                sc_argument   = st.slider("–ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è / –ø—Ä–∏–º–µ—Ä—ã", 1, 5, 3)
                sc_clarity    = st.slider("–Ø—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è", 1, 5, 3)
            comment = st.text_area("–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", placeholder="–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?")

            avg_score = round((sc_relevance + sc_structure + sc_argument + sc_clarity) / 4, 2)
            st.info(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: **{avg_score} / 5**")

            if RUBRIC and st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
                review = {
                    "submission_idx": pick_idx,
                    "assignment": RUBRIC["assignment_id"],
                    "reviewer": user,          
                    "scores": {
                        "relevance": sc_relevance,
                        "structure": sc_structure,
                        "argument": sc_argument,
                        "clarity": sc_clarity
                    },
                    "avg_score": avg_score,
                    "comment": comment.strip()
                }
                reviews = get_reviews_store()
                reviews.append(review)
                save_reviews_store()

                award_points(user, 1)
                save_points_store()
                st.success("–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +1 –æ—á–∫–æ –∑–∞ –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫—É.")

    st.markdown("---")
    st.subheader("–ú–æ–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã")
    subs = get_submissions_store()
    my_subms = [] if RUBRIC is None else [
        (i, s) for i, s in enumerate(subs)
        if s.get("assignment") == RUBRIC["assignment_id"] and s.get("user") == user
    ]
    reviews = get_reviews_store()

    if not my_subms:
        st.write("–í—ã –µ—â—ë –Ω–µ —Å–¥–∞–≤–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.")
    else:
        for idx, s in my_subms:
            avg, cnt = peer_avg_for_submission(idx)
            st.markdown(
                f"**–°–¥–∞—á–∞ #{idx}** ‚Äî peer-–æ—Ü–µ–Ω–æ–∫: {cnt}"
                + (f", —Å—Ä–µ–¥–Ω–µ–µ: **{avg}/5**" if avg is not None else "")
            )
            comments = [
                r.get("comment") for r in reviews
                if isinstance(r, dict)
                and r.get("submission_idx") == idx
                and r.get("comment")
            ]
            if comments:
                with st.expander("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"):
                    for c in comments[-5:]:
                        st.write("‚Ä¢", c)


with tab_submit:

    st.subheader("–í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è")
    RUBRIC = assignment_selector("assign_id_submit")

    if RUBRIC is None:
        st.info("–í —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ –µ—â—ë –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤'.")
    else:
        # RUBRIC is bound from the assignment selector (as before)
        questions = RUBRIC.get("questions", [])
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ –∏ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞
        due = RUBRIC.get("due_date")
        tlim = RUBRIC.get("time_limit_minutes")
        info_cols = st.columns(3)
        info_cols[0].markdown(f"**–í–æ–ø—Ä–æ—Å–æ–≤:** {len(questions)}")
        info_cols[1].markdown(f"**–î–µ–¥–ª–∞–π–Ω:** {due if due else '‚Äî'}")
        time_box = info_cols[2].empty()
        time_box.markdown(f"**–í—Ä–µ–º—è:** {tlim} –º–∏–Ω" if tlim else "**–í—Ä–µ–º—è:** –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ")

        start_key = f"start_{RUBRIC['assignment_id']}"
        started = st.session_state.get(start_key, False)
        start_ts_key = f"start_ts_{RUBRIC['assignment_id']}"
        time_up_key = f"time_up_{RUBRIC['assignment_id']}"
        if not started:
            if st.button("–ù–∞—á–∞—Ç—å", key=f"btn_start_{RUBRIC['assignment_id']}"):
                st.session_state[start_key] = True
                st.session_state[start_ts_key] = time.time()
                st.session_state[time_up_key] = False
                st.rerun()
        else:
            # –¢–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç (–æ–±–Ω–æ–≤–ª—è–µ–º, –Ω–æ –Ω–µ —Ä–µ—Ä–µ–Ω–¥—Ä–∏–º –¥–æ –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞)
            if tlim and int(tlim) > 0:
                if start_ts_key not in st.session_state:
                    st.session_state[start_ts_key] = time.time()
                elapsed = int(time.time() - st.session_state[start_ts_key])
                total = int(tlim) * 60
                remaining = max(0, total - elapsed)
                mm = remaining // 60
                ss = remaining % 60
                time_box.markdown(f"**–û—Å—Ç–∞–ª–æ—Å—å:** {mm:02d}:{ss:02d}")
                if remaining == 0:
                    st.session_state[time_up_key] = True
            if not questions:
                st.info("–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã.")
            else:
                test_type = RUBRIC.get("test_type")
                if not test_type:
                    if any("options" in q for q in questions):
                        test_type = "multiple_choice"
                    else:
                        test_type = "keyword_based"
                
                time_up = st.session_state.get(time_up_key, False)
                test_completed = st.session_state.get(f"completed_{RUBRIC['assignment_id']}", False)
                
                # –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if test_completed:
                    st.success("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ submissions
                    subs = get_submissions_store()
                    last_submission = None
                    for sub in reversed(subs):
                        if (sub.get("user") == user and 
                            sub.get("assignment") == RUBRIC["assignment_id"]):
                            last_submission = sub
                            break
                    
                    if last_submission:
                        st.markdown(f"**–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {last_submission.get('total_score', 0)}/{last_submission.get('total_max', 0)}**")
                        st.info(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤: {last_submission.get('points_awarded', 0)}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
                        for answer in last_submission.get("answers", []):
                            q_id = answer.get("question_id")
                            q_title = next((q["title"] for q in questions if q["question_id"] == q_id), q_id)
                            score = answer.get("score", 0)
                            
                            with st.expander(f"{q_id}: {q_title} ‚Äî {score} –±–∞–ª–ª–æ–≤"):
                                st.write(f"**–í–∞—à –æ—Ç–≤–µ—Ç:** {answer.get('answer', '')}")
                                st.write(f"**–ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã:** {score}")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏
                                ai_score = answer.get("ai_score")
                                if ai_score is not None:
                                    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                                    question = next((q for q in questions if q["question_id"] == q_id), None)
                                    if question:
                                        kw_score = score - (ai_score * 0.3 * question["max_points"] / 100) / 0.7
                                        kw_score = round(kw_score)
                                        st.write(f"**–ë–∞–ª–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:** {kw_score}")
                                        st.write(f"**AI –æ—Ü–µ–Ω–∫–∞:** {ai_score}/100")
                                        st.write(f"**–§–æ—Ä–º—É–ª–∞:** {kw_score} √ó 0.7 + {ai_score} √ó 0.3 = {score}")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º AI —Ñ–∏–¥–±–µ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
                                ai_feedback = answer.get("ai_feedback", [])
                                if ai_feedback:
                                    st.markdown("**ü§ñ AI-—Ñ–∏–¥–±–µ–∫:**")
                                    for fb in ai_feedback:
                                        st.write(f"‚Ä¢ {fb}")
                        
                        st.markdown("---")
                        if st.button("üîÑ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", type="secondary"):
                            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
                            st.session_state[start_key] = False
                            st.session_state[time_up_key] = False
                            st.session_state[f"completed_{RUBRIC['assignment_id']}"] = False
                            if start_ts_key in st.session_state:
                                del st.session_state[start_ts_key]
                            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                            for q in questions:
                                answer_key = f"ans_{RUBRIC['assignment_id']}_{q['question_id']}"
                                if answer_key in st.session_state:
                                    del st.session_state[answer_key]
                            st.rerun()
                    else:
                        st.error("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        if st.button("üîÑ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", type="secondary"):
                            st.session_state[f"completed_{RUBRIC['assignment_id']}"] = False
                            st.rerun()
                else:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã (–¥–∞–∂–µ –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–∏—Ç—å)
                    answers = {}
                    
                    if test_type == "multiple_choice":
                        # Render multiple choice questions
                        for q in questions:
                            st.markdown(f"### {q['title']}  \n*–ú–∞–∫—Å. –±–∞–ª–ª–æ–≤: {q['max_points']}*")
                            
                            options = q.get("options", [])
                            if options:
                                selected_option = st.radio(
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                                    options=options,
                                    index=None,  # –ù–∏–∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                    key=f"ans_{RUBRIC['assignment_id']}_{q['question_id']}"
                                )
                                answers[q["question_id"]] = selected_option
                            else:
                                st.warning("–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
                                answers[q["question_id"]] = ""
                            
                            st.markdown("---")
                    else:
                        # Render text area for keyword-based questions (original logic)
                        for q in questions:
                            st.markdown(f"### {q['title']}  \n*–ú–∞–∫—Å. –±–∞–ª–ª–æ–≤: {q['max_points']}*")
                            answers[q["question_id"]] = st.text_area(
                                f"–í–∞—à –æ—Ç–≤–µ—Ç ({q['question_id']})",
                                key=f"ans_{RUBRIC['assignment_id']}_{q['question_id']}",
                                height=140
                            )
                            st.markdown("---")

                    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –ª–∏–±–æ –ø–æ –∫–Ω–æ–ø–∫–µ, –ª–∏–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ç–∞–π–º–µ—Ä—É
                    do_finish = False
                    if time_up:
                        st.warning("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                        # –ü–æ–¥—Ö–≤–∞—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ
                        for q in questions:
                            key = f"ans_{RUBRIC['assignment_id']}_{q['question_id']}"
                            if q["question_id"] not in answers or answers[q["question_id"]] == "":
                                answers[q["question_id"]] = st.session_state.get(key, "")
                        do_finish = True
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
                        all_answered = True
                        for q in questions:
                            if test_type == "multiple_choice":
                                if answers.get(q["question_id"]) is None:
                                    all_answered = False
                                    break
                            else:
                                if not answers.get(q["question_id"], "").strip():
                                    all_answered = False
                                    break
                        
                        if all_answered:
                            do_finish = st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å", type="primary")
                        else:
                            st.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º")
                            do_finish = False

                    if do_finish:
                        total_score = 0
                        total_max = sum(q["max_points"] for q in questions)
                        per_q_results = []

                        # Run scoring per question based on test type
                        for q in questions:
                            ans_text = answers.get(q["question_id"], "")
                            
                            if test_type == "multiple_choice":
                                correct_answer = q.get("correct_answer", "")
                                if ans_text == correct_answer:
                                    q_score = q["max_points"]
                                    q_details = [f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: +{q['max_points']} –±–∞–ª–ª–æ–≤"]
                                else:
                                    q_score = 0
                                    q_details = [f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 0 –±–∞–ª–ª–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct_answer})"]
                                
                                per_q_results.append({
                                    "question_id": q["question_id"],
                                    "title": q["title"],
                                    "answer": ans_text,
                                    "kw_score": q_score,
                                    "details": q_details
                                })
                                total_score += q_score
                                
                            else:
                                q_score_kw, q_details = keyword_score_for(
                                    ans_text, q["keywords"], q["max_points"]
                                )
                                per_q_results.append({
                                    "question_id": q["question_id"],
                                    "title": q["title"],
                                    "answer": ans_text,
                                    "kw_score": q_score_kw,
                                    "details": q_details
                                })
                                total_score += q_score_kw

                        # Optional AI refinement (only for keyword-based tests)
                        if test_type == "keyword_based":
                            use_ai = st.session_state.get("use_ai")
                            if 'use_ai' not in st.session_state:
                                try:
                                    use_ai_local = use_ai
                                except:
                                    use_ai_local = False
                            else:
                                use_ai_local = st.session_state['use_ai']

                            ai_total_delta = 0
                            if use_ai_local:
                                for item in per_q_results:
                                    if client is None:
                                        continue
                                    # Build a temporary one-question rubric for llm_grade
                                    one_q_rubric = {
                                        "title": f"{RUBRIC['title']} ‚Äî {item['title']}",
                                        "keywords": [{"word": k["word"]} for k in next(q for q in questions if q["question_id"]==item["question_id"])["keywords"]]
                                    }
                                    with st.spinner(f"AI –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç: {item['question_id']}"):
                                        llm_info = llm_grade(item["answer"], one_q_rubric)
                                    if llm_info:
                                        # Combine keyword score with AI score using weighted average
                                        # 70% weight for keywords, 30% weight for AI
                                        question_max = next(q for q in questions if q["question_id"]==item["question_id"])["max_points"]
                                        kw_pct = (item["kw_score"] / question_max) * 100
                                        ai_pct = llm_info["score"]
                                        
                                        # Weighted average: 70% keywords + 30% AI
                                        combined_pct = (kw_pct * 0.7) + (ai_pct * 0.3)
                                        combined_score = round(combined_pct / 100 * question_max)
                                        
                                        ai_total_delta += (combined_score - item["kw_score"])
                                        item["ai_score"] = int(round(llm_info["score"]))
                                        item["final_score"] = combined_score
                                        item["ai_feedback"] = llm_info.get("feedback", [])
                                    else:
                                        item["final_score"] = item["kw_score"]
                                total_score += ai_total_delta  # adjust total if AI used
                            else:
                                for item in per_q_results:
                                    item["final_score"] = item["kw_score"]
                        else:
                            for item in per_q_results:
                                item["final_score"] = item["kw_score"]

                        # Show per-question breakdown
                        st.success(f"–ò—Ç–æ–≥: {total_score}/{total_max}")
                        for item in per_q_results:
                            final_sc = item.get("final_score", item.get("kw_score", 0))
                            kw_sc = item.get("kw_score", 0)
                            ai_sc = item.get("ai_score")
                            
                            with st.expander(f"{item['question_id']}: {item['title']} ‚Äî {final_sc} –±–∞–ª–ª–æ–≤"):
                                st.markdown("**–ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:**")
                                for d in item["details"]:
                                    st.write("‚Ä¢", d)
                                st.write(f"**–ë–∞–ª–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:** {kw_sc}")
                                
                                if ai_sc is not None:
                                    st.write(f"**AI –æ—Ü–µ–Ω–∫–∞:** {ai_sc}/100")
                                    st.write(f"**–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:** {kw_sc} √ó 0.7 + {ai_sc} √ó 0.3 = {final_sc}")
                                
                                if item.get("ai_feedback"):
                                    st.markdown("**AI-—Ñ–∏–¥–±–µ–∫:**")
                                    for fb in item["ai_feedback"]:
                                        st.write("‚Ä¢", fb)

                        # Award points (same rule: 1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–µ ~10% –∏—Ç–æ–≥–∞, –º–∏–Ω–∏–º—É–º 1)
                        pct = total_score / max(1, total_max)
                        gained = max(1, int(round(pct * 10)))
                        award_points(user, gained)
                        save_points_store()

                        # Save a multi-question submission
                        subs = get_submissions_store()
                        subs.append({
                            "user": user,
                            "assignment": RUBRIC["assignment_id"],
                            "answers": [
                                {
                                    "question_id": item["question_id"],
                                    "answer": item["answer"],
                                    "score": item.get("final_score", item.get("kw_score", 0)),
                                    "ai_feedback": item.get("ai_feedback", []),
                                    "ai_score": item.get("ai_score", None)
                                } for item in per_q_results
                            ],
                            "total_score": total_score,
                            "total_max": total_max,
                            "points_awarded": gained
                        })
                        save_submissions_store()

                        st.info(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {gained} –æ—á–∫.")
                        
                        # –ü–æ–º–µ—á–∞–µ–º —Ç–µ—Å—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                        st.session_state[f"completed_{RUBRIC['assignment_id']}"] = True
                        st.session_state[time_up_key] = True
                        
                        st.success("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                        st.rerun()

            # –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä –∏ –æ–Ω –Ω–µ –∏—Å—Ç—ë–∫ ‚Äî –ø–ª–∞–≤–Ω–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            if tlim and int(tlim) > 0 and not st.session_state.get(time_up_key, False):
                time.sleep(1)
                st.rerun()


with tab_leaderboard:
    st.subheader(f"–õ–∏–¥–µ—Ä–±–æ—Ä–¥ ‚Äî {current_subject()}")
    pts = get_points_store()
    if not pts:
        st.write("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
    else:
        board = sorted(pts.items(), key=lambda x: x[1], reverse=True)
        for i, (u, p) in enumerate(board, start=1):
            st.write(f"{i}. **{u}** ‚Äî {p} –æ—á–∫. {badge_for(p)}")

     # –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
    st.markdown("### üèÖ –ó–Ω–∞—á–∫–∏ –∏ —É—Ä–æ–≤–Ω–∏")
    st.markdown("""
    - üå± **Rookie** ‚Äî 0‚Äì4 –æ—á–∫–∞. –ù–∞—á–∞–ª–æ –ø—É—Ç–∏!
    - ü•â **Starter** ‚Äî 5‚Äì14 –æ—á–∫–æ–≤. –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏.
    - ü•à **Getting There** ‚Äî 15‚Äì29 –æ—á–∫–æ–≤. –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å.
    - ü•á **Consistent** ‚Äî 30‚Äì49 –æ—á–∫–æ–≤. –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    - üèÖ **Power Learner** ‚Äî 50+ –æ—á–∫–æ–≤. –û—Ç–ª–∏—á–Ω–∞—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å!
    """)

    subs = get_submissions_store()
    with st.expander("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–∞—á–∏"):
        if not subs:
            st.write("–ù–µ—Ç —Å–¥–∞—á.")
        else:
            for s in reversed(subs[-10:]):
                summary = f"{s['total_score']}/{s['total_max']}" if "total_score" in s else str(s.get("score","?"))
                preview = submission_preview(s, max_len=40)
                st.markdown(f"- **{s['user']}** ‚Üí {summary}  <span class='muted'>(+{s['points_awarded']} –æ—á–∫.)</span>  ‚Äî {preview}", unsafe_allow_html=True)

    pts = get_points_store()
    subs = get_submissions_store()
    revs = get_reviews_store()

    if pts:
        df_points = pd.DataFrame([{"user": u, "points": p} for u, p in pts.items()]).sort_values(
            "points", ascending=False
        )
    else:
        df_points = pd.DataFrame(columns=["user", "points"])

    df_subm = pd.DataFrame(subs) if subs else pd.DataFrame(columns=[
        "user", "assignment", "answers", "total_score", "total_max", "points_awarded"
    ])

    df_rev = pd.DataFrame(revs) if revs else pd.DataFrame(columns=[
        "submission_idx", "assignment", "reviewer", "scores", "avg_score", "comment"
    ])

    st.write("‚Äî")
    st.markdown("**–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö**")
    buf1, buf2, buf3 = io.BytesIO(), io.BytesIO(), io.BytesIO()
    df_points.to_csv(buf1, index=False, encoding="utf-8-sig")
    df_subm.to_csv(buf2, index=False, encoding="utf-8-sig")
    df_rev.to_csv(buf3, index=False, encoding="utf-8-sig")
    st.download_button("‚¨áÔ∏è –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (CSV)", data=buf1.getvalue(),
                    file_name=f"leaderboard_{current_subject()}.csv", mime="text/csv")
    st.download_button("‚¨áÔ∏è –°–¥–∞—á–∏ (CSV)", data=buf2.getvalue(),
                    file_name=f"submissions_{current_subject()}.csv", mime="text/csv")
    st.download_button("‚¨áÔ∏è –û—Ç–∑—ã–≤—ã (CSV)", data=buf3.getvalue(),
                    file_name=f"reviews_{current_subject()}.csv", mime="text/csv")


with tab_chat:
    st.subheader("ü§ñ –ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    st.caption("AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫—É—Ä—Å—É, –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
    
    # –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è –ø–∞–Ω–µ–ª—å —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.expander("üìã –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫—É—Ä—Å—É", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:**")
            current_subj = current_subject()
            subj_rubrics = [r for r in RUBRICS if r.get("subject", "General") == current_subj]
            
            if subj_rubrics:
                for rubric in subj_rubrics:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
                    due = rubric.get("due_date")
                    if due:
                        try:
                            from datetime import datetime
                            due_date = datetime.fromisoformat(due)
                            today = datetime.now()
                            days_left = (due_date - today).days
                            
                            if days_left < 0:
                                status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                            elif days_left == 0:
                                status = "üü° –°–µ–≥–æ–¥–Ω—è"
                            elif days_left <= 3:
                                status = f"üü† –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω."
                            else:
                                status = f"üü¢ –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω."
                        except:
                            status = f"üìÖ –¥–æ {due}"
                    else:
                        status = "‚è∞ –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
                    
                    st.markdown(f"‚Ä¢ **{rubric['title']}** - {status}")
            else:
                st.markdown("*–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π*")
        
        with col2:
            st.markdown("**üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:**")
            idx, materials = get_materials_store()
            if materials:
                for material in materials[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    display_name = display_filename(material['name'], material.get('original_name'))
                    st.markdown(f"‚Ä¢ **{display_name}**")
                    if material.get("note"):
                        st.markdown(f"  *{material['note']}*")
            else:
                st.markdown("*–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*")
    
    # –ë–ª–æ–∫ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    st.markdown("### üí° –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
    
    example_questions = [
        "–ö–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —É –º–µ–Ω—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã?",
        "–ö–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—Å—Ç—å –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é?",
        "–ö–æ–≥–¥–∞ –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞–Ω–∏—é 2?"
    ]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    for question in example_questions:
        st.markdown(f"‚Ä¢ {question}")
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
    st.markdown("### üí¨ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    
    user_question = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–º–æ–≥—É—Ç —Å –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ ML?",
        key="user_question_input"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", use_container_width=True, type="primary"):
        if user_question.strip():
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
            st.session_state.current_question = user_question.strip()
            st.rerun()
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
    
    # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if hasattr(st.session_state, 'current_question') and st.session_state.current_question:
        st.markdown("### ü§ñ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.markdown(f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {st.session_state.current_question}")
        st.markdown("---")
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
            response = process_chat_question(st.session_state.current_question, current_subj)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∫—Ä–∞—Å–∏–≤–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        with st.container(border=True):
            st.markdown(response)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        st.markdown("---")
        st.markdown("üí° **–°–æ–≤–µ—Ç:** –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö, –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∫—É—Ä—Å–∞, –∑–∞–¥–∞–Ω–∏—è—Ö –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

st.caption("üöÄ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤, —É–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞, —á–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.")

with tab_materials:
    st.subheader(f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {current_subject()}")
    tab_documents, tab_videos = st.tabs(["üìÑ –ü–µ—á–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "üé• –í–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"])
    
    with tab_documents:
        st.markdown("### üìÑ –ü–µ—á–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        
        # Upload area 
        if current_role == "teacher":
            st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤. –û–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ.")
            uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", type=None, accept_multiple_files=True)
            note = st.text_input("–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ª–µ–∫—Ü–∏—è 1, —Å–ª–∞–π–¥—ã")
            col_u1, col_u2 = st.columns([1, 2])
            do_save = col_u1.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å")
        else:
            st.info("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º")
            uploaded = None
            note = ""
            do_save = False

        # –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—á–∞—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        idx, items = get_materials_store()
        subj = current_subject()
        subj_dir = os.path.join(MATERIALS_DIR, safe_filename(subj))
        ensure_dir(subj_dir)

        if do_save and uploaded:
            import time
            for f in uploaded:
                raw = f.read()
                fname = safe_filename(f.name)
                path = os.path.join(subj_dir, fname)

                # avoid accidental overwrite: add suffix if exists
                base, ext = os.path.splitext(fname)
                k = 1
                while os.path.exists(path):
                    fname = f"{base}({k}){ext}"
                    path = os.path.join(subj_dir, fname)
                    k += 1

                with open(path, "wb") as out:
                    out.write(raw)

                item = {
                    "name": fname,
                    "original_name": f.name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    "path": path,
                    "size": len(raw),
                    "mime": f.type or "application/octet-stream",
                    "uploader": user,
                    "note": note.strip(),
                    "ts": int(time.time())
                }
                items.append(item)
            save_materials_index(idx)
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded)}")

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π) - –ü–ï–†–ï–î —Å–ø–∏—Å–∫–æ–º
        if current_role == "teacher" and items:
            with st.expander("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏", expanded=False):
                st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**")
                
                # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                files_to_delete = []
                for it in items:
                    display_name = display_filename(it['name'], it.get('original_name'))
                    file_info = f"{display_name} ({round(it['size']/1024,1)} KB)"
                    if it.get("note"):
                        file_info += f" - {it['note']}"
                    
                    if st.checkbox(file_info, key=f"del_check_{it['name']}"):
                        files_to_delete.append(it)
                
                if files_to_delete:
                    st.warning(f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(files_to_delete)}")
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", type="primary"):
                        deleted_count = 0
                        for file_to_delete in files_to_delete:
                            try:
                                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
                                if os.path.exists(file_to_delete["path"]):
                                    os.remove(file_to_delete["path"])
                                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                                items[:] = [it for it in items if it["name"] != file_to_delete["name"]]
                                deleted_count += 1
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_to_delete['name']}: {str(e)}")
                        
                        if deleted_count > 0:
                            save_materials_index(idx)
                            st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
                            st.rerun()
                else:
                    st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

        st.markdown("### –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        if not items:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        else:
            # optional: filter by text
            q = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/–æ–ø–∏—Å–∞–Ω–∏—é", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ª–µ–∫—Ü–∏—è, –¥–∑2‚Ä¶")
            filtered = []
            if q:
                ql = q.lower()
                for it in items:
                    if ql in it["name"].lower() or (it.get("note") or "").lower().find(ql) >= 0:
                        filtered.append(it)
            else:
                filtered = items

            # Render list with download buttons
            for it in sorted(filtered, key=lambda x: x.get("ts", 0), reverse=True):
                with st.container(border=True):
                    display_name = display_filename(it['name'], it.get('original_name'))
                    st.markdown(f"**{display_name}**  ‚Äî  <span class='muted'>{round(it['size']/1024,1)} KB</span>", unsafe_allow_html=True)
                    if it.get("note"):
                        st.markdown(f"<span class='badge'>–û–ø–∏—Å–∞–Ω–∏–µ</span> {it['note']}", unsafe_allow_html=True)
                    st.markdown(f"<span class='muted'>–ó–∞–≥—Ä—É–∑–∏–ª: {it.get('uploader','?')}</span>", unsafe_allow_html=True)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                    if it.get("annotation"):
                        with st.expander("üìù AI-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è", expanded=False):
                            st.markdown(it["annotation"])

                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    col_dl, col_ai = st.columns([1, 1])
                    
                    with col_dl:
                        # Read file for download button
                        try:
                            with open(it["path"], "rb") as fh:
                                data_bytes = fh.read()
                            st.download_button(
                                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å",
                                data=data_bytes,
                                file_name=it["name"],
                                mime=it.get("mime") or "application/octet-stream",
                                key=f"dl_{subj}_{it['name']}"
                            )
                        except FileNotFoundError:
                            st.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª —É–¥–∞–ª—ë–Ω –≤—Ä—É—á–Ω—É—é.")
                    
                    with col_ai:
                        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                        if st.button("ü§ñ –°–æ–∑–¥–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", key=f"ai_annot_{it['name']}"):
                            with st.spinner("AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª..."):
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
                                text = extract_text_from_file(it["path"], it.get("mime", ""))
                                
                                if text.startswith("–û—à–∏–±–∫–∞") or text.startswith("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"):
                                    st.error(text)
                                else:
                                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
                                    annotation = generate_annotation(text, it["name"])
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤ –º–∞—Ç–µ—Ä–∏–∞–ª
                                    it["annotation"] = annotation
                                    save_materials_index(idx)
                                    
                                    st.success("‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
                                    st.rerun()

    
    with tab_videos:
        st.markdown("### üé• –í–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        
        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ
        def get_video_info(url):
            """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ"""
            try:
                if "youtube.com" in url or "youtu.be" in url:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ YouTube —Å—Å—ã–ª–∫–∏
                    import re
                    video_id = None
                    if "youtube.com/watch?v=" in url:
                        video_id = url.split("v=")[1].split("&")[0]
                    elif "youtu.be/" in url:
                        video_id = url.split("youtu.be/")[1].split("?")[0]
                    
                    if video_id:
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube
                        video_title = get_youtube_title(video_id)
                        
                        return {
                            "type": "youtube",
                            "video_id": video_id,
                            "embed_url": f"https://www.youtube.com/embed/{video_id}",
                            "title": video_title
                        }
                elif "vk.com" in url:
                    return {
                        "type": "vk",
                        "url": url,
                        "title": "VK –≤–∏–¥–µ–æ"
                    }
                else:
                    return {
                        "type": "other",
                        "url": url,
                        "title": "–í–∏–¥–µ–æ"
                    }
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")
                return None
        
        def get_youtube_title(video_id):
            """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ YouTube –≤–∏–¥–µ–æ –ø–æ ID"""
            try:
                import requests
                from bs4 import BeautifulSoup
                
                # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∏–¥–µ–æ
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                response = requests.get(video_url, headers=headers, timeout=10)
                response.raise_for_status()
                
                # –ü–∞—Ä—Å–∏–º HTML
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # –ò—â–µ–º title –≤ head
                title_tag = soup.find('title')
                if title_tag:
                    title = title_tag.get_text().strip()
                    # –£–±–∏—Ä–∞–µ–º " - YouTube" –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    if title.endswith(' - YouTube'):
                        title = title[:-10].strip()
                    return title
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ title, –∏—â–µ–º –≤ meta —Ç–µ–≥–∞—Ö
                meta_title = soup.find('meta', property='og:title')
                if meta_title:
                    return meta_title.get('content', '').strip()
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID
                return f"YouTube –≤–∏–¥–µ–æ {video_id}"
                
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID
                return f"YouTube –≤–∏–¥–µ–æ {video_id}"
        
        def load_videos():
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞"""
            try:
                with open("videos.json", "r", encoding="utf-8") as f:
                    return json.load(f)
            except FileNotFoundError:
                return {}
        
        def save_videos(videos):
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª"""
            with open("videos.json", "w", encoding="utf-8") as f:
                json.dump(videos, f, ensure_ascii=False, indent=2)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        videos_data = load_videos()
        current_subject_videos = videos_data.get(current_subject(), [])
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)
        if current_role == "teacher":
            st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
            video_url = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ", placeholder="https://www.youtube.com/watch?v=...", key="video_url")
            video_note = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ–∫—Ü–∏—è 1, –û—Å–Ω–æ–≤—ã ML", key="video_note")
            
            if st.button("üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", use_container_width=True):
                if video_url and video_url.strip():
                    video_info = get_video_info(video_url.strip())
                    if video_info:
                        video_item = {
                            "url": video_url.strip(),
                            "title": video_info["title"],
                            "note": video_note.strip(),
                            "uploader": user,
                            "ts": int(time.time()),
                            "video_info": video_info
                        }
                        
                        current_subject_videos.append(video_item)
                        videos_data[current_subject()] = current_subject_videos
                        save_videos(videos_data)
                        
                        st.success(f"‚úÖ –í–∏–¥–µ–æ '{video_info['title']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                        st.rerun()
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ")
                else:
                    st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ")
        else:
            st.info("üé• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
        st.markdown("#### –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ")
        if not current_subject_videos:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –≤–∏–¥–µ–æ
            search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–æ–ø–∏—Å–∞–Ω–∏—é", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ª–µ–∫—Ü–∏—è, ML...", key="video_search")
            
            filtered_videos = current_subject_videos
            if search_query:
                search_lower = search_query.lower()
                filtered_videos = [v for v in current_subject_videos 
                                 if search_lower in v.get("title", "").lower() or 
                                    search_lower in v.get("note", "").lower()]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ
            for i, video in enumerate(sorted(filtered_videos, key=lambda x: x.get("ts", 0), reverse=True)):
                with st.container(border=True):
                    st.markdown(f"**{video['title']}**")
                    if video.get("note"):
                        st.markdown(f"<span class='badge'>–û–ø–∏—Å–∞–Ω–∏–µ</span> {video['note']}", unsafe_allow_html=True)
                    st.markdown(f"<span class='muted'>–î–æ–±–∞–≤–∏–ª: {video.get('uploader', '?')}</span>", unsafe_allow_html=True)
                    
                    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä
                    video_info = video.get("video_info", {})
                    if video_info.get("type") == "youtube":
                        st.components.v1.iframe(video_info["embed_url"], width=700, height=400)
                    else:
                        st.markdown(f"[–û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ]({video['url']})")
                    
                    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)
                    if current_role == "teacher":
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"del_video_{i}"):
                            current_subject_videos.remove(video)
                            videos_data[current_subject()] = current_subject_videos
                            save_videos(videos_data)
                            st.success("–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ")
                            st.rerun()

# –í–∫–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)
if current_role == "teacher":
    with tab_test_creator:
        st.subheader("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤")
        st.markdown("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ—Å—Ç—ã –¥–≤—É—Ö —Ç–∏–ø–æ–≤: —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞–º–∏
        tab_create, tab_ai_generate, tab_manage = st.tabs(["–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", "ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏"])
        
        with tab_create:
            st.markdown("### –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ 
            col1, col2 = st.columns(2)
            
            with col1:
                test_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ1", key="test_title_input")
                test_subject = st.selectbox("–ü—Ä–µ–¥–º–µ—Ç", SUBJECTS, key="test_subject")
                # –°—Ä–æ–∫ —Å–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                due_date = st.date_input("–°—Ä–æ–∫ —Å–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", key="test_due_date")
            
            with col2:
                test_type = st.selectbox(
                    "–¢–∏–ø —Ç–µ—Å—Ç–∞",
                    ["multiple_choice", "keyword_based"],
                    format_func=lambda x: "–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤" if x == "multiple_choice" else "–° –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
                    key="test_type_selector"
                )
                test_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", height=100, key="test_description_input")
                time_limit_minutes = st.number_input("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω)", min_value=0, max_value=1440, value=0, help="0 ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", key="test_time_limit")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –≤ session_state
                st.session_state.test_type = test_type
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
                if "previous_test_type" not in st.session_state:
                    st.session_state.previous_test_type = test_type
                elif st.session_state.previous_test_type != test_type:
                    st.session_state.previous_test_type = test_type
                    st.session_state.questions = [{"question_id": "q1"}]
                    st.rerun()
            
            # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
            if st.button("üéØ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", use_container_width=True):
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
                test_data = {
                    "title": test_title,
                    "subject": test_subject,
                    "test_type": test_type,
                    "description": test_description,
                    "questions": st.session_state.get("questions", [])
                }
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫ —Å–¥–∞—á–∏, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                try:
                    if due_date:
                        # —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–∞–∫ ISO-—Å—Ç—Ä–æ–∫—É yyyy-mm-dd
                        test_data["due_date"] = due_date.isoformat()
                except Exception:
                    pass
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω (>0)
                try:
                    if time_limit_minutes and int(time_limit_minutes) > 0:
                        test_data["time_limit_minutes"] = int(time_limit_minutes)
                except Exception:
                    pass
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ç–µ—Å—Ç–∞
                test_id = generate_test_id(test_title, test_subject)
                test_data["assignment_id"] = test_id
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                is_valid, error_message = validate_test_data(test_data)
                
                if is_valid:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –≤ rubric.json
                    rubric_data = convert_to_rubric_format(test_data)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä—É–±—Ä–∏–∫–∏
                    with open("rubric.json", "r", encoding="utf-8") as f:
                        rubrics = json.load(f)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä—É–±—Ä–∏–∫—É
                    rubrics.append(rubric_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    with open("rubric.json", "w", encoding="utf-8") as f:
                        json.dump(rubrics, f, ensure_ascii=False, indent=2)
                    
                    st.success(f"‚úÖ –¢–µ—Å—Ç '{test_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞–Ω–∏—è!")
                    st.info(f"ID —Ç–µ—Å—Ç–∞: {test_id}")
                    
                    # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                    st.session_state.questions = [{"question_id": "q1"}]
                    st.rerun()
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_message}")
            
            st.markdown("---")
            st.markdown("### –í–æ–ø—Ä–æ—Å—ã")
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
            if "questions" not in st.session_state:
                st.session_state.questions = [{"question_id": "q1"}]
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–≤–Ω–µ —Ñ–æ—Ä–º—ã)
            col_add, col_clear = st.columns([1, 1])
            with col_add:
                if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", use_container_width=True):
                    new_q_id = f"q{len(st.session_state.questions) + 1}"
                    st.session_state.questions.append({"question_id": new_q_id})
                    st.rerun()
            
            with col_clear:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", use_container_width=True):
                    st.session_state.questions = [{"question_id": "q1"}]
                    st.rerun()
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if "test_type" not in st.session_state:
                st.session_state.test_type = "multiple_choice"

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
            for i, question in enumerate(st.session_state.questions):
                with st.expander(f"–í–æ–ø—Ä–æ—Å {i+1} (ID: {question['question_id']})", expanded=True):
                    question_text = st.text_area(
                        f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ {i+1}",
                        value=question.get("question_text", ""),
                        key=f"q_text_{i}",
                        height=100
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –∏–∑ session_state
                    test_type = st.session_state.get("test_type", "multiple_choice")
                    
                    if test_type == "multiple_choice":
                        st.markdown("**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:**")
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º options –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                        if "options" not in st.session_state.questions[i]:
                            st.session_state.questions[i]["options"] = ["", ""]
                        
                        options = st.session_state.questions[i].get("options", ["", ""])
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        for j, option in enumerate(options):
                            option_text = st.text_input(
                                f"–í–∞—Ä–∏–∞–Ω—Ç {j+1}",
                                value=option,
                                key=f"q_{i}_option_{j}"
                            )
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –≤ session_state
                            st.session_state.questions[i]["options"][j] = option_text
                        
                        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–≤–Ω–µ —Ñ–æ—Ä–º—ã)
                        col_buttons = st.columns([1, 1, 4])  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–µ
                        with col_buttons[0]:
                            if st.button("‚ûï –í–∞—Ä–∏–∞–Ω—Ç", key=f"add_opt_{i}"):
                                st.session_state.questions[i]["options"].append("")
                                st.rerun()
                        with col_buttons[1]:
                            if st.button("‚ûñ –í–∞—Ä–∏–∞–Ω—Ç", key=f"rem_opt_{i}"):
                                if len(st.session_state.questions[i]["options"]) > 1:
                                    st.session_state.questions[i]["options"].pop()
                                    st.rerun()
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è selectbox
                        valid_options = [opt for opt in st.session_state.questions[i]["options"] if opt.strip()]
                        
                        correct_answer = st.selectbox(
                            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                            options=valid_options if valid_options else ["–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"],
                            key=f"q_{i}_correct"
                        )
                        
                        max_points = st.number_input(
                            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã",
                            min_value=1,
                            max_value=100,
                            value=question.get("max_points", 10),
                            key=f"q_{i}_points"
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
                        st.session_state.questions[i].update({
                            "question_text": question_text,
                            "correct_answer": correct_answer,
                            "max_points": max_points
                        })
                    
                    elif test_type == "keyword_based":
                        st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –±–∞–ª–ª—ã:**")
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º keywords –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                        if "keywords" not in st.session_state.questions[i]:
                            st.session_state.questions[i]["keywords"] = [{"word": "", "points": 1}]
                        
                        keywords = st.session_state.questions[i].get("keywords", [{"word": "", "points": 1}])
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        for j, keyword in enumerate(keywords):
                            col_word, col_points = st.columns([3, 1])
                            with col_word:
                                word = st.text_input(
                                    f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ {j+1}",
                                    value=keyword.get("word", ""),
                                    key=f"q_{i}_kw_{j}_word"
                                )
                            with col_points:
                                points = st.number_input(
                                    "–ë–∞–ª–ª—ã",
                                    min_value=1,
                                    max_value=100,
                                    value=keyword.get("points", 1),
                                    key=f"q_{i}_kw_{j}_points"
                                )
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ session_state
                            st.session_state.questions[i]["keywords"][j] = {"word": word, "points": points}
                        
                        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–≤–Ω–µ —Ñ–æ—Ä–º—ã)
                        col_buttons = st.columns([1, 1, 4])  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–µ
                        with col_buttons[0]:
                            if st.button("‚ûï –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", key=f"add_kw_{i}"):
                                st.session_state.questions[i]["keywords"].append({"word": "", "points": 1})
                                st.rerun()
                        with col_buttons[1]:
                            if st.button("‚ûñ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", key=f"rem_kw_{i}"):
                                if len(st.session_state.questions[i]["keywords"]) > 0:
                                    st.session_state.questions[i]["keywords"].pop()
                                    st.rerun()
                        
                        max_points = st.number_input(
                            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å",
                            min_value=1,
                            max_value=100,
                            value=question.get("max_points", 10),
                            key=f"q_{i}_max_points"
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
                        st.session_state.questions[i].update({
                            "question_text": question_text,
                            "max_points": max_points
                        })
        
        with tab_ai_generate:
            st.markdown("### ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤")
            st.markdown("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI
            if client is None:
                st.error("‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á API (DEEPSEEK_API_KEY)")
                st.info("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á.")
            else:
                # –§–æ—Ä–º–∞ –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                with st.form("ai_test_generation"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        ai_test_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–æ ML", key="ai_test_title")
                        ai_test_subject = st.selectbox("–ü—Ä–µ–¥–º–µ—Ç", SUBJECTS, key="ai_test_subject")
                        ai_test_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ—Å—Ç", key="ai_test_description")
                    
                    with col2:
                        ai_question_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", min_value=1, max_value=20, value=5, key="ai_question_count")
                        ai_time_limit = st.number_input("–í—Ä–µ–º—è –Ω–∞ —Ç–µ—Å—Ç (–º–∏–Ω—É—Ç—ã)", min_value=0, max_value=180, value=60, help="0 ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", key="ai_time_limit")
                        ai_due_date = st.date_input("–°—Ä–æ–∫ —Å–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", key="ai_due_date")
                    
                    # –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    st.markdown("### üìö –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                    idx, materials = get_materials_store()
                    if materials:
                        material_options = {}
                        for material in materials:
                            material_name = material.get("name", "")
                            material_note = material.get("note", "")
                            material_annotation = material.get("annotation", "")
                            
                            display_name = f"{display_filename(material_name, material.get('original_name'))}"
                            if material_note:
                                display_name += f" - {material_note}"
                            
                            material_options[display_name] = {
                                "name": material_name,
                                "note": material_note,
                                "annotation": material_annotation
                            }
                        
                        selected_materials = st.multiselect(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                            options=list(material_options.keys()),
                            key="ai_selected_materials"
                        )
                    else:
                        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")
                        selected_materials = []
                    
                    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    if st.form_submit_button("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç", use_container_width=True, type="primary"):
                        if ai_test_title and ai_test_description and selected_materials:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ AI
                            with st.spinner("AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç..."):
                                generated_test = generate_ai_test(
                                    ai_test_title, 
                                    ai_test_subject, 
                                    ai_test_description,
                                    ai_question_count,
                                    selected_materials,
                                    material_options
                                )
                            
                            if generated_test:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
                                if save_generated_test(generated_test, ai_time_limit, ai_due_date):
                                    st.success(f"‚úÖ –¢–µ—Å—Ç '{ai_test_title}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞")
                        else:
                            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        
        with tab_manage:
            st.markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏")
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
            filter_subject = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É", ["–í—Å–µ"] + SUBJECTS, key="test_filter")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã –∏–∑ rubric.json (–≥–¥–µ –æ–Ω–∏ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
            with open("rubric.json", "r", encoding="utf-8") as f:
                all_rubrics = json.load(f)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã)
            if filter_subject == "–í—Å–µ":
                filtered_rubrics = all_rubrics
            else:
                filtered_rubrics = [r for r in all_rubrics if r.get("subject") == filter_subject]
            
            if not filtered_rubrics:
                st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
            else:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                for rubric in filtered_rubrics:
                    test_id = rubric["assignment_id"]
                    with st.container(border=True):
                        col_title, col_actions = st.columns([3, 1])
                        
                        with col_title:
                            st.markdown(f"**{rubric['title']}**")
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
                            if rubric.get("test_type") == "multiple_choice":
                                test_type_display = "–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"
                            elif rubric.get("test_type") == "keyword_based":
                                test_type_display = "–° –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
                            else:
                                # –°—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ test_type - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                                if any("options" in q for q in rubric.get("questions", [])):
                                    test_type_display = "–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)"
                                else:
                                    test_type_display = "–° –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                            ai_indicator = "ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è" if rubric.get("ai_generated") else "‚úçÔ∏è –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ"
                            
                            st.markdown(f"*–ü—Ä–µ–¥–º–µ—Ç: {rubric['subject']} | –¢–∏–ø: {test_type_display} | {ai_indicator}*")
                            st.markdown(f"*–í–æ–ø—Ä–æ—Å–æ–≤: {len(rubric['questions'])} | ID: {test_id}*")
                        
                        with col_actions:
                            if st.button("üóëÔ∏è", key=f"del_{test_id}", help="–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"):
                                # –£–¥–∞–ª—è–µ–º –∏–∑ rubric.json
                                updated_rubrics = [r for r in all_rubrics if r["assignment_id"] != test_id]
                                
                                with open("rubric.json", "w", encoding="utf-8") as f:
                                    json.dump(updated_rubrics, f, ensure_ascii=False, indent=2)
                                
                                st.success("–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω")
                                st.rerun()
                            
                            if st.button("üìã", key=f"edit_{test_id}", help="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"):
                                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                st.session_state[f"edit_test_{test_id}"] = True
                                st.rerun()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            editing_test = None
            for rubric in filtered_rubrics:
                test_id = rubric["assignment_id"]
                if st.session_state.get(f"edit_test_{test_id}", False):
                    editing_test = rubric
                    break
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if editing_test:
                st.markdown("---")
                st.markdown(f"### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: {editing_test['title']}")
                
                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", key="back_to_list"):
                    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    for key in list(st.session_state.keys()):
                        if key.startswith("edit_test_"):
                            del st.session_state[key]
                    st.rerun()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
                test_type = editing_test.get("test_type")
                if not test_type:
                    if any("options" in q for q in editing_test.get("questions", [])):
                        test_type = "multiple_choice"
                    else:
                        test_type = "keyword_based"
                
                # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                with st.form("edit_test_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        new_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", value=editing_test["title"])
                        new_subject = st.selectbox("–ü—Ä–µ–¥–º–µ—Ç", SUBJECTS, index=SUBJECTS.index(editing_test["subject"]) if editing_test["subject"] in SUBJECTS else 0)
                    
                    with col2:
                        new_test_type = st.selectbox(
                            "–¢–∏–ø —Ç–µ—Å—Ç–∞",
                            ["multiple_choice", "keyword_based"],
                            index=0 if test_type == "multiple_choice" else 1,
                            format_func=lambda x: "–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤" if x == "multiple_choice" else "–° –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
                        )
                        new_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", value=editing_test.get("description", ""), height=100)
                    
                    st.markdown("---")
                    st.markdown("### –í–æ–ø—Ä–æ—Å—ã")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    questions = editing_test.get("questions", [])
                    for i, question in enumerate(questions):
                        with st.expander(f"–í–æ–ø—Ä–æ—Å {i+1} (ID: {question.get('question_id', f'q{i+1}')})", expanded=True):
                            question_text = st.text_area(
                                f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ {i+1}",
                                value=question.get("title", ""),
                                key=f"edit_q_text_{i}",
                                height=100
                            )
                            
                            if new_test_type == "multiple_choice":
                                st.markdown("**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:**")
                                options = question.get("options", [])
                                
                                for j, option in enumerate(options):
                                    option_text = st.text_input(
                                        f"–í–∞—Ä–∏–∞–Ω—Ç {j+1}",
                                        value=option,
                                        key=f"edit_q_{i}_option_{j}"
                                    )
                                
                                correct_answer = st.selectbox(
                                    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                                    options=options if options else ["–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"],
                                    index=options.index(question.get("correct_answer", "")) if question.get("correct_answer", "") in options else 0,
                                    key=f"edit_q_{i}_correct"
                                )
                                
                                max_points = st.number_input(
                                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã",
                                    min_value=1,
                                    max_value=100,
                                    value=question.get("max_points", 10),
                                    key=f"edit_q_{i}_points"
                                )
                                
                            else:  # keyword_based
                                st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –±–∞–ª–ª—ã:**")
                                keywords = question.get("keywords", [])
                                
                                for j, keyword in enumerate(keywords):
                                    col_word, col_points = st.columns([3, 1])
                                    with col_word:
                                        word = st.text_input(
                                            f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ {j+1}",
                                            value=keyword.get("word", ""),
                                            key=f"edit_q_{i}_kw_{j}_word"
                                        )
                                    with col_points:
                                        points = st.number_input(
                                            "–ë–∞–ª–ª—ã",
                                            min_value=1,
                                            max_value=100,
                                            value=keyword.get("points", 1),
                                            key=f"edit_q_{i}_kw_{j}_points"
                                        )
                                
                                max_points = st.number_input(
                                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å",
                                    min_value=1,
                                    max_value=100,
                                    value=question.get("max_points", 10),
                                    key=f"edit_q_{i}_max_points"
                                )
                    
                    # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    col_save, col_cancel = st.columns([1, 1])
                    with col_save:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True):
                            # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
                            updated_test = {
                                "subject": new_subject,
                                "assignment_id": editing_test["assignment_id"],
                                "title": new_title,
                                "test_type": new_test_type,
                                "description": new_description,
                                "questions": []
                            }
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
                            for i, question in enumerate(questions):
                                updated_question = {
                                    "question_id": question.get("question_id", f"q{i+1}"),
                                    "title": st.session_state.get(f"edit_q_text_{i}", question.get("title", "")),
                                    "max_points": question.get("max_points", 10)
                                }
                                
                                if new_test_type == "multiple_choice":
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                                    options = []
                                    for j in range(len(question.get("options", []))):
                                        option_value = st.session_state.get(f"edit_q_{i}_option_{j}", "")
                                        if option_value:
                                            options.append(option_value)
                                    
                                    updated_question.update({
                                        "options": options,
                                        "correct_answer": st.session_state.get(f"edit_q_{i}_correct", ""),
                                        "max_points": st.session_state.get(f"edit_q_{i}_points", question.get("max_points", 10)),
                                        "test_type": "multiple_choice"
                                    })
                                else:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                    keywords = []
                                    for j in range(len(question.get("keywords", []))):
                                        word = st.session_state.get(f"edit_q_{i}_kw_{j}_word", "")
                                        points = st.session_state.get(f"edit_q_{i}_kw_{j}_points", 1)
                                        if word:
                                            keywords.append({"word": word, "points": points})
                                    
                                    updated_question.update({
                                        "keywords": keywords,
                                        "max_points": st.session_state.get(f"edit_q_{i}_max_points", question.get("max_points", 10))
                                    })
                                
                                updated_test["questions"].append(updated_question)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ rubric.json
                            with open("rubric.json", "r", encoding="utf-8") as f:
                                all_rubrics = json.load(f)
                            
                            # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç
                            for i, rubric in enumerate(all_rubrics):
                                if rubric["assignment_id"] == editing_test["assignment_id"]:
                                    all_rubrics[i] = updated_test
                                    break
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            with open("rubric.json", "w", encoding="utf-8") as f:
                                json.dump(all_rubrics, f, ensure_ascii=False, indent=2)
                            
                            st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            del st.session_state[f"edit_test_{editing_test['assignment_id']}"]
                            st.rerun()
                    
                    with col_cancel:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            del st.session_state[f"edit_test_{editing_test['assignment_id']}"]
                            st.rerun()
